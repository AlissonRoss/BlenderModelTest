/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/


/* global THREE */
import * as THREE from 'three';
import React, { useEffect, useRef, useState } from "react";
import { useGLTF, PerspectiveCamera, useAnimations } from "@react-three/drei";

const Model = (props) => {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("./models/hackmerced.gltf");
  const { actions, names } = useAnimations(animations, group);

  // Use state to keep track of animation completion
  const [animationsFinished, setAnimationsFinished] = useState(false);

  useEffect(() => {
    names.forEach((name) => {
      actions[name].play();
    });

    const mixer = new THREE.AnimationMixer(group.current);

    // Add all animation actions to the mixer
    names.forEach((name) => {
      mixer.clipAction(actions[name]._clip).play();
    });

    // Listen for the "loop" event of the mixer
    mixer.addEventListener("loop", (event) => {
      if (event.action._clip.name === names[names.length - 1]) {
        // This is the last animation in the sequence
        setAnimationsFinished(true);
      }
    });
  }, [names, actions]);

  // Start the next loop when all animations are finished
  useEffect(() => {
    if (animationsFinished) {
      // Start your next animation loop or perform any other desired actions
      console.log("All animations have finished. Starting next loop...");
    }
  }, [animationsFinished]);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <pointLight
          name="Light"
          intensity={100}
          decay={2}
          position={[8.281, 22.776, -3.518]}
          rotation={[-1.839, 0.602, 1.932]}
        />
        <PerspectiveCamera
          name="Camera"
          makeDefault={true}
          far={1000}
          near={0.001}
          fov={22.895}
          position={[10, 10, 40]}
          rotation={[10, 10, 10]}
        />
        <mesh
          name="Base"
          castShadow
          receiveShadow
          geometry={nodes.Base.geometry}
          material={materials["Material.001"]}
          position={[0.041, 9.974, 0]}
          scale={[1, 2, 1]}
        />
        <mesh
          name="Head"
          castShadow
          receiveShadow
          geometry={nodes.Head.geometry}
          material={materials["Material.002"]}
          position={[0.041, 16.574, 0]}
        />
        <mesh
          name="Roof"
          castShadow
          receiveShadow
          geometry={nodes.Roof.geometry}
          material={materials["Material.003"]}
          position={[0.041, 19.974, 0]}
          rotation={[0, Math.PI / 4, 0]}
        />
        <pointLight
          name="Light001"
          intensity={100}
          decay={2}
          position={[-4.441, 19.966, 15.95]}
          rotation={[-1.839, 0.602, 1.932]}
        />
        <group name="Cow" position={[-8, 15, 0]}>
          <mesh
            name="Cube"
            castShadow
            receiveShadow
            geometry={nodes.Cube.geometry}
            material={materials["Matériau.002"]}
          />
          <mesh
            name="Cube_1"
            castShadow
            receiveShadow
            geometry={nodes.Cube_1.geometry}
            material={materials["Matériau.001"]}
          />
          <mesh
            name="Cube_2"
            castShadow
            receiveShadow
            geometry={nodes.Cube_2.geometry}
            material={materials.Matériau}
          />
          <mesh
            name="Cube_3"
            castShadow
            receiveShadow
            geometry={nodes.Cube_3.geometry}
            material={materials["Matériau.003"]}
          />
          <mesh
            name="Cube_4"
            castShadow
            receiveShadow
            geometry={nodes.Cube_4.geometry}
            material={materials["Matériau.004"]}
          />
          <pointLight
            name="Point"
            intensity={100}
            decay={2}
            color="#00ffff"
            position={[-1.466, 1.698, 2.119]}
            rotation={[-Math.PI / 2, 0, 0]}
          />
        </group>
        <mesh
          name="Text"
          castShadow
          receiveShadow
          geometry={nodes.Text.geometry}
          material={materials.Material}
          position={[-2, 13, 2.62]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={[1.49, 1, 1.429]}
        >
          <mesh
            name="Text001"
            castShadow
            receiveShadow
            geometry={nodes.Text001.geometry}
            material={materials.Material}
            position={[2.684, -5.24, 0]}
            rotation={[0, 0, Math.PI]}
          />
          <mesh
            name="Text002"
            castShadow
            receiveShadow
            geometry={nodes.Text002.geometry}
            material={materials.Material}
            position={[3.1, -0.52, 0]}
            rotation={[0, 0, -Math.PI / 2]}
            scale={[1.128, 0.671, 1]}
          />
          <mesh
            name="Text003"
            castShadow
            receiveShadow
            geometry={nodes.Text003.geometry}
            material={materials.Material}
            position={[-0.416, -4.72, 0]}
            rotation={[0, 0, Math.PI / 2]}
            scale={[1.128, 0.671, 1]}
          />
        </mesh>
      </group>
    </group>
  );
}

export default Model
useGLTF.preload("./models/hackmerced.gltf");